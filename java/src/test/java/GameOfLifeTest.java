/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

import java.util.Arrays;
import java.util.List;

import static junit.framework.TestCase.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class GameOfLifeTest {
  @Mock
  Cell livingCell;

  @Mock
  Cell deadCell;

  GameOfLife gameOfLife;

  @Before
  public void cells() {
    gameOfLife = new GameOfLife();
    when(livingCell.isLiving()).thenReturn(true);
    when(deadCell.isLiving()).thenReturn(false);
  }

  @Test
  public void AnyLivingCellWithZeroLiveNeighborsDiesAsIfByUnderPopulation() {
    List<Cell> neighbors = Arrays.asList(deadCell, deadCell, deadCell, deadCell);
    assertFalse(gameOfLife.lives(livingCell, neighbors));
  }

  @Ignore
  @Test
  public void AnyLivingCellWithOneLiveNeighborDiesAsIfByUnderPopulation() {
    List<Cell> neighbors = Arrays.asList(livingCell, deadCell, deadCell, deadCell);
    assertFalse(gameOfLife.lives(livingCell, neighbors));
  }

  @Ignore
  @Test
  public void AnyLivingCellWithTwoLiveNeighborsLivesOnToTheNextGeneration() {
    List<Cell> neighbors = Arrays.asList(livingCell, livingCell, deadCell, deadCell);
    assertTrue(gameOfLife.lives(livingCell, neighbors));
  }

  @Ignore
  @Test
  public void AnyLivingCellWithThreeLiveNeighborsLivesOnToTheNextGeneration() {
  }

  @Ignore
  @Test
  public void AnyLivingCellWithFourLiveNeighborsDiesAsIfByOverpopulation() {
  }

  @Ignore
  @Test
  public void AnyDeadCellWithZeroLiveNeighborsRemainsDead() {
  }

  @Ignore
  @Test
  public void AnyDeadCellWithOneLiveNeighborRemainsDead() {
  }

  @Ignore
  @Test
  public void AnyDeadCellWithTwoLiveNeighborsRemainsDead() {
  }

  @Ignore
  @Test
  public void AnyDeadCellWithThreeLiveNeighborsBecomesALiveCellAsIfByReproduction() {
  }

  @Ignore
  @Test
  public void AnyDeadCellWithFourLiveNeighborsRemainsDead() {
  }
}
